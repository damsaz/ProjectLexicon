{"ast":null,"code":"var _jsxFileName = \"/Users/bhrozdamsaz/Documents/GitHub/ProjectLexicon/projectLexicon/ClientApp/src/components/Chat/ConversationList2.js\";\nimport React, { Component, useState, useEffect } from 'react';\nimport ConversationSearch from './ConversationSearch';\nimport ConversationListItem from './ConversationListItem';\nimport Toolbar from './Toolbar';\nimport ToolbarButton from './ToolbarButton';\nimport axios from 'axios';\nimport { apiGet } from './api';\nimport './Style/ConversationList.css';\nimport usersService from '../users/UsersService';\nimport authService from '../api-authorization/AuthorizeService';\nimport Message from './Message';\nimport moment from 'moment';\nexport class ConversationList2 extends Component {\n  constructor(props) {\n    super(props);\n    this.renderMessages = () => {\n      let i = 0;\n      let messageCount = messages.length;\n      let tempMessages = [];\n      while (i < messageCount) {\n        let previous = messages[i - 1];\n        let current = messages[i];\n        let next = messages[i + 1];\n        let isMine = current.author === MY_USER_ID;\n        let currentMoment = moment(current.timestamp);\n        let prevBySameAuthor = false;\n        let nextBySameAuthor = false;\n        let startsSequence = true;\n        let endsSequence = true;\n        let showTimestamp = true;\n        if (previous) {\n          let previousMoment = moment(previous.timestamp);\n          let previousDuration = moment.duration(currentMoment.diff(previousMoment));\n          prevBySameAuthor = previous.author === current.author;\n          if (prevBySameAuthor && previousDuration.as('hours') < 1) {\n            startsSequence = false;\n          }\n          if (previousDuration.as('hours') < 1) {\n            showTimestamp = false;\n          }\n        }\n        if (next) {\n          let nextMoment = moment(next.timestamp);\n          let nextDuration = moment.duration(nextMoment.diff(currentMoment));\n          nextBySameAuthor = next.author === current.author;\n          if (nextBySameAuthor && nextDuration.as('hours') < 1) {\n            endsSequence = false;\n          }\n        }\n        tempMessages.push( /*#__PURE__*/React.createElement(Message, {\n          key: i,\n          isMine: isMine,\n          startsSequence: startsSequence,\n          endsSequence: endsSequence,\n          showTimestamp: showTimestamp,\n          data: current,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 17\n          }\n        }));\n\n        // Proceed to the next message.\n        i += 1;\n      }\n      return tempMessages;\n    };\n    this.getMessages = () => {\n      var tempMessages = [{\n        id: 1,\n        author: 'apple',\n        message: 'Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.',\n        timestamp: new Date().getTime()\n      }, {\n        id: 2,\n        author: 'orange',\n        message: 'It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!',\n        timestamp: new Date().getTime()\n      }, {\n        id: 3,\n        author: 'orange',\n        message: 'Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.',\n        timestamp: new Date().getTime()\n      }, {\n        id: 4,\n        author: 'apple',\n        message: 'It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!',\n        timestamp: new Date().getTime()\n      }, {\n        id: 5,\n        author: 'apple',\n        message: 'Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.',\n        timestamp: new Date().getTime()\n      }, {\n        id: 6,\n        author: 'apple',\n        message: 'It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!',\n        timestamp: new Date().getTime()\n      }, {\n        id: 7,\n        author: 'orange',\n        message: 'Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.',\n        timestamp: new Date().getTime()\n      }, {\n        id: 8,\n        author: 'orange',\n        message: 'It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!',\n        timestamp: new Date().getTime()\n      }, {\n        id: 9,\n        author: 'apple',\n        message: 'Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.',\n        timestamp: new Date().getTime()\n      }, {\n        id: 10,\n        author: 'orange',\n        message: 'It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!',\n        timestamp: new Date().getTime()\n      }];\n\n      // setMessages([...messages, ...tempMessages])\n    };\n    this.state = {\n      conversations: [],\n      loading: true\n    };\n  }\n  componentDidMount() {\n    this.getConversations();\n    this.getMessages();\n  }\n  handleSubmit(event) {\n    console.log(event.target);\n    alert(event.target.id);\n    // setContactInfo({ FirstName: \"\", SecondName: \"\", Age: \"\", Nationality: \"\", EmailAdress: \"\"}); //reset form values after submit\n  }\n\n  renderForecastsTable(conversations) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"conversation-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Toolbar, {\n      title: \"Messenger\",\n      leftItems: [/*#__PURE__*/React.createElement(ToolbarButton, {\n        key: \"cog\",\n        icon: \"ion-ios-cog\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 25\n        }\n      })],\n      rightItems: [/*#__PURE__*/React.createElement(ToolbarButton, {\n        key: \"add\",\n        icon: \"ion-ios-add-circle-outline\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 25\n        }\n      })],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(ConversationSearch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }\n    }), conversations.map(conversation => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"conversation-list-item\",\n      key: conversation.userid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"conversation-photo\",\n      src: \"https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-chat/ava3.webp\",\n      alt: \"conversation\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"conversation-info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"conversation-title\",\n      id: conversation.userid,\n      onClick: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 33\n      }\n    }, conversation.userName), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"conversation-snippet\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 33\n      }\n    }, \"Offline\")))));\n  }\n  render() {\n    let contents = this.state.loading ? /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"em\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 18\n      }\n    }, \"Loading...\")) : this.renderForecastsTable(this.state.conversations);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 13\n      }\n    }, contents);\n  }\n  async getConversations() {\n    const token = await authService.getAccessToken();\n    const response = await fetch('api/Messages/GetUser', {\n      headers: !token ? {} : {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const data = await response.json();\n    this.setState({\n      conversations: data,\n      loading: false\n    });\n  }\n}\nConversationList2.displayName = ConversationList2.name;","map":{"version":3,"names":["React","Component","useState","useEffect","ConversationSearch","ConversationListItem","Toolbar","ToolbarButton","axios","apiGet","usersService","authService","Message","moment","ConversationList2","constructor","props","renderMessages","i","messageCount","messages","length","tempMessages","previous","current","next","isMine","author","MY_USER_ID","currentMoment","timestamp","prevBySameAuthor","nextBySameAuthor","startsSequence","endsSequence","showTimestamp","previousMoment","previousDuration","duration","diff","as","nextMoment","nextDuration","push","getMessages","id","message","Date","getTime","state","conversations","loading","componentDidMount","getConversations","handleSubmit","event","console","log","target","alert","renderForecastsTable","map","conversation","userid","userName","render","contents","token","getAccessToken","response","fetch","headers","data","json","setState","displayName","name"],"sources":["/Users/bhrozdamsaz/Documents/GitHub/ProjectLexicon/projectLexicon/ClientApp/src/components/Chat/ConversationList2.js"],"sourcesContent":["import React, {Component,useState, useEffect} from 'react';\nimport ConversationSearch from './ConversationSearch';\nimport ConversationListItem from './ConversationListItem';\nimport Toolbar from './Toolbar';\nimport ToolbarButton from './ToolbarButton';\nimport axios from 'axios';\nimport { apiGet } from './api';\nimport './Style/ConversationList.css';\nimport usersService from '../users/UsersService';\nimport authService from '../api-authorization/AuthorizeService'\nimport Message from './Message';\nimport moment from 'moment';\n\nexport class ConversationList2 extends Component {\n    static displayName = ConversationList2.name;\n\n    constructor(props) {\n        super(props);\n        this.state = { conversations: [], loading: true };\n    }\n  \n\n     renderMessages = () => {\n        let i = 0;\n        let messageCount = messages.length;\n        let tempMessages = [];\n\n        while (i < messageCount) {\n            let previous = messages[i - 1];\n            let current = messages[i];\n            let next = messages[i + 1];\n            let isMine = current.author === MY_USER_ID;\n            let currentMoment = moment(current.timestamp);\n            let prevBySameAuthor = false;\n            let nextBySameAuthor = false;\n            let startsSequence = true;\n            let endsSequence = true;\n            let showTimestamp = true;\n\n            if (previous) {\n                let previousMoment = moment(previous.timestamp);\n                let previousDuration = moment.duration(currentMoment.diff(previousMoment));\n                prevBySameAuthor = previous.author === current.author;\n\n                if (prevBySameAuthor && previousDuration.as('hours') < 1) {\n                    startsSequence = false;\n                }\n\n                if (previousDuration.as('hours') < 1) {\n                    showTimestamp = false;\n                }\n            }\n\n            if (next) {\n                let nextMoment = moment(next.timestamp);\n                let nextDuration = moment.duration(nextMoment.diff(currentMoment));\n                nextBySameAuthor = next.author === current.author;\n\n                if (nextBySameAuthor && nextDuration.as('hours') < 1) {\n                    endsSequence = false;\n                }\n            }\n\n            tempMessages.push(\n                <Message\n                    key={i}\n                    isMine={isMine}\n                    startsSequence={startsSequence}\n                    endsSequence={endsSequence}\n                    showTimestamp={showTimestamp}\n                    data={current}\n                />\n            );\n\n            // Proceed to the next message.\n            i += 1;\n        }\n\n        return tempMessages;\n    }\n     getMessages = () => {\n        var tempMessages = [\n            {\n                id: 1,\n                author: 'apple',\n                message: 'Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.',\n                timestamp: new Date().getTime()\n            },\n            {\n                id: 2,\n                author: 'orange',\n                message: 'It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!',\n                timestamp: new Date().getTime()\n            },\n            {\n                id: 3,\n                author: 'orange',\n                message: 'Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.',\n                timestamp: new Date().getTime()\n            },\n            {\n                id: 4,\n                author: 'apple',\n                message: 'It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!',\n                timestamp: new Date().getTime()\n            },\n            {\n                id: 5,\n                author: 'apple',\n                message: 'Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.',\n                timestamp: new Date().getTime()\n            },\n            {\n                id: 6,\n                author: 'apple',\n                message: 'It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!',\n                timestamp: new Date().getTime()\n            },\n            {\n                id: 7,\n                author: 'orange',\n                message: 'Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.',\n                timestamp: new Date().getTime()\n            },\n            {\n                id: 8,\n                author: 'orange',\n                message: 'It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!',\n                timestamp: new Date().getTime()\n            },\n            {\n                id: 9,\n                author: 'apple',\n                message: 'Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.',\n                timestamp: new Date().getTime()\n            },\n            {\n                id: 10,\n                author: 'orange',\n                message: 'It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!',\n                timestamp: new Date().getTime()\n            },\n        ]\n\n        // setMessages([...messages, ...tempMessages])\n\n    }\n    componentDidMount() {\n        this.getConversations();\n        this.getMessages();\n    }\n    handleSubmit(event) {\n        console.log(event.target)\n        alert(event.target.id);\n        // setContactInfo({ FirstName: \"\", SecondName: \"\", Age: \"\", Nationality: \"\", EmailAdress: \"\"}); //reset form values after submit\n\n    }\n     renderForecastsTable(conversations) {\n        return (\n            <div className=\"conversation-list\">\n            \n                <Toolbar\n                    title=\"Messenger\"\n                    leftItems={[\n                        <ToolbarButton key=\"cog\" icon=\"ion-ios-cog\" />\n                    ]}\n                    rightItems={[\n                        <ToolbarButton key=\"add\" icon=\"ion-ios-add-circle-outline\" />\n                    ]}\n                />\n                <ConversationSearch />\n                {\n                    conversations.map(conversation =>\n\n                        <div className=\"conversation-list-item\" key={conversation.userid}  >\n                            <img className=\"conversation-photo\" src=\"https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-chat/ava3.webp\" alt=\"conversation\" />\n                            <div className=\"conversation-info\" >\n                                <h1 className=\"conversation-title\" id={conversation.userid}onClick={this.handleSubmit}>{conversation.userName}</h1>\n                                <p className=\"conversation-snippet\">Offline</p>\n                            </div>\n                        </div>\n                )\n                }\n\n            </div>\n        );\n    }\n    render() {\n        let contents = this.state.loading\n            ? <p><em>Loading...</em></p>\n            : this.renderForecastsTable(this.state.conversations);\n\n        return (\n            <div>\n              \n                {contents}\n\n            </div>\n\n        );\n    }\n\n    async getConversations() {\n        const token = await authService.getAccessToken();\n        const response = await fetch('api/Messages/GetUser', {\n            headers: !token ? {} : { 'Authorization': `Bearer ${token}` }\n        });\n        const data = await response.json();\n        this.setState({ conversations: data, loading: false });\n    }\n\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}