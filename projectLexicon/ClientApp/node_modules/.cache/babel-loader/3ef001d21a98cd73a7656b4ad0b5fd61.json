{"ast":null,"code":"var _jsxFileName = \"/Users/bhrozdamsaz/Documents/GitHub/ProjectLexicon/projectLexicon/ClientApp/src/components/api-authorization/Logout.js\";\nimport React from 'react';\nimport { Component } from 'react';\nimport authService from './AuthorizeService';\nimport { AuthenticationResultStatus } from './AuthorizeService';\nimport { QueryParameterNames, LogoutActions, ApplicationPaths } from './ApiAuthorizationConstants';\nexport class Logout extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: undefined,\n      isReady: false,\n      authenticated: false\n    };\n  }\n  componentDidMount() {\n    const action = this.props.action;\n    switch (action) {\n      case LogoutActions.Logout:\n        if (!!window.history.state.state.local) {\n          this.logout(this.getReturnUrl());\n        } else {\n          this.setState({\n            isReady: true,\n            message: \"The logout was not initiated from within the page.\"\n          });\n        }\n        break;\n      case LogoutActions.LogoutCallback:\n        this.processLogoutCallback();\n        break;\n      case LogoutActions.LoggedOut:\n        this.setState({\n          isReady: true,\n          message: \"You successfully logged out!\"\n        });\n        break;\n      default:\n        throw new Error(`Invalid action '${action}'`);\n    }\n    this.populateAuthenticationState();\n  }\n  render() {\n    const {\n      isReady,\n      message\n    } = this.state;\n    if (!isReady) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 20\n        }\n      });\n    }\n    if (!!message) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }\n      }, message);\n    } else {\n      const action = this.props.action;\n      switch (action) {\n        case LogoutActions.Logout:\n          return /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 29\n            }\n          }, \"Processing logout\");\n        case LogoutActions.LogoutCallback:\n          return /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 29\n            }\n          }, \"Processing logout callback\");\n        case LogoutActions.LoggedOut:\n          return /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 29\n            }\n          }, message);\n        default:\n          throw new Error(`Invalid action '${action}'`);\n      }\n    }\n  }\n  async logout(returnUrl) {\n    const state = {\n      returnUrl\n    };\n    const isauthenticated = await authService.isAuthenticated();\n    if (isauthenticated) {\n      const result = await authService.signOut(state);\n      switch (result.status) {\n        case AuthenticationResultStatus.Redirect:\n          break;\n        case AuthenticationResultStatus.Success:\n          await this.navigateToReturnUrl(returnUrl);\n          break;\n        case AuthenticationResultStatus.Fail:\n          this.setState({\n            message: result.message\n          });\n          break;\n        default:\n          throw new Error(\"Invalid authentication result status.\");\n      }\n    } else {\n      this.setState({\n        message: \"You successfully logged out!\"\n      });\n    }\n  }\n  async processLogoutCallback() {\n    const url = window.location.href;\n    const result = await authService.completeSignOut(url);\n    switch (result.status) {\n      case AuthenticationResultStatus.Redirect:\n        throw new Error('Should not redirect.');\n      case AuthenticationResultStatus.Success:\n        await this.navigateToReturnUrl(this.getReturnUrl(result.state));\n        break;\n      case AuthenticationResultStatus.Fail:\n        this.setState({\n          message: result.message\n        });\n        break;\n      default:\n        throw new Error(\"Invalid authentication result status.\");\n    }\n  }\n  async populateAuthenticationState() {\n    const authenticated = await authService.isAuthenticated();\n    this.setState({\n      isReady: true,\n      authenticated\n    });\n  }\n  getReturnUrl(state) {\n    const params = new URLSearchParams(window.location.search);\n    const fromQuery = params.get(QueryParameterNames.ReturnUrl);\n    if (fromQuery && !fromQuery.startsWith(`${window.location.origin}/`)) {\n      throw new Error(\"Invalid return url. The return url needs to have the same origin as the current page.\");\n    }\n    return state && state.returnUrl || fromQuery || `${window.location.origin}${ApplicationPaths.LoggedOut}`;\n  }\n  navigateToReturnUrl(returnUrl) {\n    return window.location.replace(returnUrl);\n  }\n}","map":{"version":3,"names":["React","Component","authService","AuthenticationResultStatus","QueryParameterNames","LogoutActions","ApplicationPaths","Logout","constructor","props","state","message","undefined","isReady","authenticated","componentDidMount","action","window","history","local","logout","getReturnUrl","setState","LogoutCallback","processLogoutCallback","LoggedOut","Error","populateAuthenticationState","render","returnUrl","isauthenticated","isAuthenticated","result","signOut","status","Redirect","Success","navigateToReturnUrl","Fail","url","location","href","completeSignOut","params","URLSearchParams","search","fromQuery","get","ReturnUrl","startsWith","origin","replace"],"sources":["/Users/bhrozdamsaz/Documents/GitHub/ProjectLexicon/projectLexicon/ClientApp/src/components/api-authorization/Logout.js"],"sourcesContent":["import React from 'react'\nimport { Component } from 'react';\nimport authService from './AuthorizeService';\nimport { AuthenticationResultStatus } from './AuthorizeService';\nimport { QueryParameterNames, LogoutActions, ApplicationPaths } from './ApiAuthorizationConstants';\n\n\nexport class Logout extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            message: undefined,\n            isReady: false,\n            authenticated: false\n        };\n    }\n\n    componentDidMount() {\n        const action = this.props.action;\n        switch (action) {\n            case LogoutActions.Logout:\n                if (!!window.history.state.state.local) {\n                    this.logout(this.getReturnUrl());\n                } else {\n                    \n                    this.setState({ isReady: true, message: \"The logout was not initiated from within the page.\" });\n                }\n                break;\n            case LogoutActions.LogoutCallback:\n                this.processLogoutCallback();\n                break;\n            case LogoutActions.LoggedOut:\n                this.setState({ isReady: true, message: \"You successfully logged out!\" });\n                break;\n            default:\n                throw new Error(`Invalid action '${action}'`);\n        }\n\n        this.populateAuthenticationState();\n    }\n\n    render() {\n        const { isReady, message } = this.state;\n        if (!isReady) {\n            return <div></div>\n        }\n        if (!!message) {\n            return (<div>{message}</div>);\n        } else {\n            const action = this.props.action;\n            switch (action) {\n                case LogoutActions.Logout:\n                    return (<div>Processing logout</div>);\n                case LogoutActions.LogoutCallback:\n                    return (<div>Processing logout callback</div>);\n                case LogoutActions.LoggedOut:\n                    return (<div>{message}</div>);\n                default:\n                    throw new Error(`Invalid action '${action}'`);\n            }\n        }\n    }\n\n    async logout(returnUrl) {\n        const state = { returnUrl };\n        const isauthenticated = await authService.isAuthenticated();\n        if (isauthenticated) {\n            const result = await authService.signOut(state);\n            switch (result.status) {\n                case AuthenticationResultStatus.Redirect:\n                    break;\n                case AuthenticationResultStatus.Success:\n                    await this.navigateToReturnUrl(returnUrl);\n                    break;\n                case AuthenticationResultStatus.Fail:\n                    this.setState({ message: result.message });\n                    break;\n                default:\n                    throw new Error(\"Invalid authentication result status.\");\n            }\n        } else {\n            this.setState({ message: \"You successfully logged out!\" });\n        }\n    }\n\n    async processLogoutCallback() {\n        const url = window.location.href;\n        const result = await authService.completeSignOut(url);\n        switch (result.status) {\n            case AuthenticationResultStatus.Redirect:\n\n                throw new Error('Should not redirect.');\n            case AuthenticationResultStatus.Success:\n                await this.navigateToReturnUrl(this.getReturnUrl(result.state));\n                break;\n            case AuthenticationResultStatus.Fail:\n                this.setState({ message: result.message });\n                break;\n            default:\n                throw new Error(\"Invalid authentication result status.\");\n        }\n    }\n\n    async populateAuthenticationState() {\n        const authenticated = await authService.isAuthenticated();\n        this.setState({ isReady: true, authenticated });\n    }\n\n    getReturnUrl(state) {\n        const params = new URLSearchParams(window.location.search);\n        const fromQuery = params.get(QueryParameterNames.ReturnUrl);\n        if (fromQuery && !fromQuery.startsWith(`${window.location.origin}/`)) {\n            \n            throw new Error(\"Invalid return url. The return url needs to have the same origin as the current page.\")\n        }\n        return (state && state.returnUrl) ||\n            fromQuery ||\n            `${window.location.origin}${ApplicationPaths.LoggedOut}`;\n    }\n\n    navigateToReturnUrl(returnUrl) {\n        return window.location.replace(returnUrl);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}