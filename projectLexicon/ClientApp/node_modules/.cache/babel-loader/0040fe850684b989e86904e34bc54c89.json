{"ast":null,"code":"/**\n  shave - Shave is a javascript plugin that truncates multi-line text within a html element based on set max height\n  @version v2.5.10\n  @link https://github.com/yowainwright/shave#readme\n  @author Jeff Wainwright <yowainwright@gmail.com> (jeffry.in)\n  @license MIT\n**/\nfunction shave(target, maxHeight) {\n  var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (typeof maxHeight === 'undefined' || isNaN(maxHeight)) throw Error('maxHeight is required');\n  var els = typeof target === 'string' ? document.querySelectorAll(target) : target;\n  if (!els) return;\n  var character = opts.character || '&mldr;';\n  var classname = opts.classname || 'js-shave';\n  var spaces = typeof opts.spaces === 'boolean' ? opts.spaces : true;\n  var charclassname = opts.charclassname || 'js-shave-char';\n  var charHtml = \"<span class=\\\"\".concat(charclassname, \"\\\">\").concat(character, \"</span>\");\n  if (!('length' in els)) els = [els];\n  for (var i = 0; i < els.length; i += 1) {\n    var el = els[i];\n    var styles = el.style;\n    var span = el.querySelector(\".\".concat(classname));\n    var textProp = el.textContent === undefined ? 'innerText' : 'textContent'; // If element text has already been shaved\n\n    if (span) {\n      // Remove the ellipsis to recapture the original text\n      el.removeChild(el.querySelector(\".\".concat(charclassname)));\n      el[textProp] = el[textProp]; // eslint-disable-line\n      // nuke span, recombine text\n    }\n\n    var fullText = el[textProp];\n    var words = spaces ? fullText.split(' ') : fullText; // If 0 or 1 words, we're done\n\n    if (words.length < 2) continue; // Temporarily remove any CSS height for text height calculation\n\n    var heightStyle = styles.height;\n    styles.height = 'auto';\n    var maxHeightStyle = styles.maxHeight;\n    styles.maxHeight = 'none'; // If already short enough, we're done\n\n    if (el.offsetHeight <= maxHeight) {\n      styles.height = heightStyle;\n      styles.maxHeight = maxHeightStyle;\n      continue;\n    } // Binary search for number of words which can fit in allotted height\n\n    var max = words.length - 1;\n    var min = 0;\n    var pivot = void 0;\n    while (min < max) {\n      pivot = min + max + 1 >> 1; // eslint-disable-line no-bitwise\n\n      el[textProp] = spaces ? words.slice(0, pivot).join(' ') : words.slice(0, pivot);\n      el.insertAdjacentHTML('beforeend', charHtml);\n      if (el.offsetHeight > maxHeight) max = pivot - 1;else min = pivot;\n    }\n    el[textProp] = spaces ? words.slice(0, max).join(' ') : words.slice(0, max);\n    el.insertAdjacentHTML('beforeend', charHtml);\n    var diff = spaces ? \" \".concat(words.slice(max).join(' ')) : words.slice(max);\n    var shavedText = document.createTextNode(diff);\n    var elWithShavedText = document.createElement('span');\n    elWithShavedText.classList.add(classname);\n    elWithShavedText.style.display = 'none';\n    elWithShavedText.appendChild(shavedText);\n    el.insertAdjacentElement('beforeend', elWithShavedText);\n    styles.height = heightStyle;\n    styles.maxHeight = maxHeightStyle;\n  }\n}\nexport default shave;","map":{"version":3,"names":["shave","target","maxHeight","opts","arguments","length","undefined","isNaN","Error","els","document","querySelectorAll","character","classname","spaces","charclassname","charHtml","concat","i","el","styles","style","span","querySelector","textProp","textContent","removeChild","fullText","words","split","heightStyle","height","maxHeightStyle","offsetHeight","max","min","pivot","slice","join","insertAdjacentHTML","diff","shavedText","createTextNode","elWithShavedText","createElement","classList","add","display","appendChild","insertAdjacentElement"],"sources":["/Users/bhrozdamsaz/Documents/GitHub/ProjectLexicon/projectLexicon/ClientApp/node_modules/shave/dist/shave.es.js"],"sourcesContent":["/**\n  shave - Shave is a javascript plugin that truncates multi-line text within a html element based on set max height\n  @version v2.5.10\n  @link https://github.com/yowainwright/shave#readme\n  @author Jeff Wainwright <yowainwright@gmail.com> (jeffry.in)\n  @license MIT\n**/\nfunction shave(target, maxHeight) {\n  var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (typeof maxHeight === 'undefined' || isNaN(maxHeight)) throw Error('maxHeight is required');\n  var els = typeof target === 'string' ? document.querySelectorAll(target) : target;\n  if (!els) return;\n  var character = opts.character || '&mldr;';\n  var classname = opts.classname || 'js-shave';\n  var spaces = typeof opts.spaces === 'boolean' ? opts.spaces : true;\n  var charclassname = opts.charclassname || 'js-shave-char';\n  var charHtml = \"<span class=\\\"\".concat(charclassname, \"\\\">\").concat(character, \"</span>\");\n  if (!('length' in els)) els = [els];\n\n  for (var i = 0; i < els.length; i += 1) {\n    var el = els[i];\n    var styles = el.style;\n    var span = el.querySelector(\".\".concat(classname));\n    var textProp = el.textContent === undefined ? 'innerText' : 'textContent'; // If element text has already been shaved\n\n    if (span) {\n      // Remove the ellipsis to recapture the original text\n      el.removeChild(el.querySelector(\".\".concat(charclassname)));\n      el[textProp] = el[textProp]; // eslint-disable-line\n      // nuke span, recombine text\n    }\n\n    var fullText = el[textProp];\n    var words = spaces ? fullText.split(' ') : fullText; // If 0 or 1 words, we're done\n\n    if (words.length < 2) continue; // Temporarily remove any CSS height for text height calculation\n\n    var heightStyle = styles.height;\n    styles.height = 'auto';\n    var maxHeightStyle = styles.maxHeight;\n    styles.maxHeight = 'none'; // If already short enough, we're done\n\n    if (el.offsetHeight <= maxHeight) {\n      styles.height = heightStyle;\n      styles.maxHeight = maxHeightStyle;\n      continue;\n    } // Binary search for number of words which can fit in allotted height\n\n\n    var max = words.length - 1;\n    var min = 0;\n    var pivot = void 0;\n\n    while (min < max) {\n      pivot = min + max + 1 >> 1; // eslint-disable-line no-bitwise\n\n      el[textProp] = spaces ? words.slice(0, pivot).join(' ') : words.slice(0, pivot);\n      el.insertAdjacentHTML('beforeend', charHtml);\n      if (el.offsetHeight > maxHeight) max = pivot - 1;else min = pivot;\n    }\n\n    el[textProp] = spaces ? words.slice(0, max).join(' ') : words.slice(0, max);\n    el.insertAdjacentHTML('beforeend', charHtml);\n    var diff = spaces ? \" \".concat(words.slice(max).join(' ')) : words.slice(max);\n    var shavedText = document.createTextNode(diff);\n    var elWithShavedText = document.createElement('span');\n    elWithShavedText.classList.add(classname);\n    elWithShavedText.style.display = 'none';\n    elWithShavedText.appendChild(shavedText);\n    el.insertAdjacentElement('beforeend', elWithShavedText);\n    styles.height = heightStyle;\n    styles.maxHeight = maxHeightStyle;\n  }\n}\n\nexport default shave;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}