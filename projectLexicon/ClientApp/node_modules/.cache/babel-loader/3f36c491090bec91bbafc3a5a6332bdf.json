{"ast":null,"code":"var _jsxFileName = \"/Users/bhrozdamsaz/Documents/GitHub/ProjectLexicon/projectLexicon/ClientApp/src/components/api-authorization/Login.js\";\nimport React from 'react';\nimport { Component } from 'react';\nimport authService from './AuthorizeService';\nimport { AuthenticationResultStatus } from './AuthorizeService';\nimport { LoginActions, QueryParameterNames, ApplicationPaths } from './ApiAuthorizationConstants';\nimport { withTranslation } from 'react-i18next';\nclass LoginPlain extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: undefined\n    };\n  }\n  componentDidMount() {\n    const action = this.props.action;\n    const {\n      t,\n      i18n\n    } = this.props;\n    const lng = i18n.language;\n    document.cookie = \".AspNetCore.Culture=\" + encodeURIComponent(\"c=\" + lng + \"|uic=\" + lng);\n    switch (action) {\n      case LoginActions.Login:\n        this.login(this.getReturnUrl());\n        break;\n      case LoginActions.LoginCallback:\n        this.processLoginCallback();\n        break;\n      case LoginActions.LoginFailed:\n        const params = new URLSearchParams(window.location.search);\n        const error = params.get(QueryParameterNames.Message);\n        this.setState({\n          message: error\n        });\n        break;\n      case LoginActions.Profile:\n        this.redirectToProfile();\n        break;\n      case LoginActions.Register:\n        this.redirectToRegister();\n        break;\n      default:\n        throw new Error(`Invalid action '${action}'`);\n    }\n  }\n  render() {\n    const action = this.props.action;\n    const {\n      message\n    } = this.state;\n    if (!!message) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 20\n        }\n      }, message);\n    } else {\n      switch (action) {\n        case LoginActions.Login:\n          return /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 29\n            }\n          }, \"Processing login\");\n        case LoginActions.LoginCallback:\n          return /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 29\n            }\n          }, \"Processing login callback\");\n        case LoginActions.Profile:\n        case LoginActions.Register:\n          return /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 29\n            }\n          });\n        default:\n          throw new Error(`Invalid action '${action}'`);\n      }\n    }\n  }\n  async login(returnUrl) {\n    const state = {\n      returnUrl\n    };\n    const result = await authService.signIn(state);\n    switch (result.status) {\n      case AuthenticationResultStatus.Redirect:\n        break;\n      case AuthenticationResultStatus.Success:\n        await this.navigateToReturnUrl(returnUrl);\n        break;\n      case AuthenticationResultStatus.Fail:\n        this.setState({\n          message: result.message\n        });\n        break;\n      default:\n        throw new Error(`Invalid status result ${result.status}.`);\n    }\n  }\n  async processLoginCallback() {\n    const url = window.location.href;\n    const result = await authService.completeSignIn(url);\n    switch (result.status) {\n      case AuthenticationResultStatus.Redirect:\n        throw new Error('Should not redirect.');\n      case AuthenticationResultStatus.Success:\n        await this.navigateToReturnUrl(this.getReturnUrl(result.state));\n        break;\n      case AuthenticationResultStatus.Fail:\n        this.setState({\n          message: result.message\n        });\n        break;\n      default:\n        throw new Error(`Invalid authentication result status '${result.status}'.`);\n    }\n  }\n  getReturnUrl(state) {\n    const params = new URLSearchParams(window.location.search);\n    const fromQuery = params.get(QueryParameterNames.ReturnUrl);\n    if (fromQuery && !fromQuery.startsWith(`${window.location.origin}/`)) {\n      throw new Error(\"Invalid return url. The return url needs to have the same origin as the current page.\");\n    }\n    return state && state.returnUrl || fromQuery || `${window.location.origin}/`;\n  }\n  redirectToRegister() {\n    this.redirectToApiAuthorizationPath(`${ApplicationPaths.IdentityRegisterPath}?${QueryParameterNames.ReturnUrl}=${encodeURI(ApplicationPaths.Login)}`);\n  }\n  redirectToProfile() {\n    this.redirectToApiAuthorizationPath(ApplicationPaths.IdentityManagePath);\n  }\n  redirectToApiAuthorizationPath(apiAuthorizationPath) {\n    const redirectUrl = `${window.location.origin}${apiAuthorizationPath}`;\n    window.location.replace(redirectUrl);\n  }\n  navigateToReturnUrl(returnUrl) {\n    window.location.replace(returnUrl);\n  }\n}\nexport const Login = withTranslation()(LoginPlain);","map":{"version":3,"names":["React","Component","authService","AuthenticationResultStatus","LoginActions","QueryParameterNames","ApplicationPaths","withTranslation","LoginPlain","constructor","props","state","message","undefined","componentDidMount","action","t","i18n","lng","language","document","cookie","encodeURIComponent","Login","login","getReturnUrl","LoginCallback","processLoginCallback","LoginFailed","params","URLSearchParams","window","location","search","error","get","Message","setState","Profile","redirectToProfile","Register","redirectToRegister","Error","render","returnUrl","result","signIn","status","Redirect","Success","navigateToReturnUrl","Fail","url","href","completeSignIn","fromQuery","ReturnUrl","startsWith","origin","redirectToApiAuthorizationPath","IdentityRegisterPath","encodeURI","IdentityManagePath","apiAuthorizationPath","redirectUrl","replace"],"sources":["/Users/bhrozdamsaz/Documents/GitHub/ProjectLexicon/projectLexicon/ClientApp/src/components/api-authorization/Login.js"],"sourcesContent":["import React from 'react'\nimport { Component } from 'react';\nimport authService from './AuthorizeService';\nimport { AuthenticationResultStatus } from './AuthorizeService';\nimport { LoginActions, QueryParameterNames, ApplicationPaths } from './ApiAuthorizationConstants';\nimport { withTranslation } from 'react-i18next';\n\n\nclass LoginPlain extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            message: undefined\n        };\n    }\n\n    componentDidMount() {\n\t\tconst action = this.props.action;\n\t\tconst { t, i18n } = this.props;\n\t\tconst lng = i18n.language;\n\n\t\t\n\t\tdocument.cookie = \".AspNetCore.Culture=\" +\n\t\t\tencodeURIComponent(\"c=\" + lng + \"|uic=\" + lng); \n\t\t\n        switch (action) {\n            case LoginActions.Login:\n                this.login(this.getReturnUrl());\n                break;\n            case LoginActions.LoginCallback:\n                this.processLoginCallback();\n                break;\n            case LoginActions.LoginFailed:\n                const params = new URLSearchParams(window.location.search);\n                const error = params.get(QueryParameterNames.Message);\n                this.setState({ message: error });\n                break;\n            case LoginActions.Profile:\n                this.redirectToProfile();\n                break;\n            case LoginActions.Register:\n                this.redirectToRegister();\n                break;\n            default:\n                throw new Error(`Invalid action '${action}'`);\n        }\n    }\n\n    render() {\n        const action = this.props.action;\n        const { message } = this.state;\n\n        if (!!message) {\n            return <div>{message}</div>\n        } else {\n            switch (action) {\n                case LoginActions.Login:\n                    return (<div>Processing login</div>);\n                case LoginActions.LoginCallback:\n                    return (<div>Processing login callback</div>);\n                case LoginActions.Profile:\n                case LoginActions.Register:\n                    return (<div></div>);\n                default:\n                    throw new Error(`Invalid action '${action}'`);\n            }\n        }\n    }\n\n    async login(returnUrl) {\n        const state = { returnUrl };\n        const result = await authService.signIn(state);\n        switch (result.status) {\n            case AuthenticationResultStatus.Redirect:\n                break;\n            case AuthenticationResultStatus.Success:\n                await this.navigateToReturnUrl(returnUrl);\n                break;\n            case AuthenticationResultStatus.Fail:\n                this.setState({ message: result.message });\n                break;\n            default:\n                throw new Error(`Invalid status result ${result.status}.`);\n        }\n    }\n\n    async processLoginCallback() {\n        const url = window.location.href;\n        const result = await authService.completeSignIn(url);\n        switch (result.status) {\n            case AuthenticationResultStatus.Redirect:\n\n                throw new Error('Should not redirect.');\n            case AuthenticationResultStatus.Success:\n                await this.navigateToReturnUrl(this.getReturnUrl(result.state));\n                break;\n            case AuthenticationResultStatus.Fail:\n                this.setState({ message: result.message });\n                break;\n            default:\n                throw new Error(`Invalid authentication result status '${result.status}'.`);\n        }\n    }\n\n    getReturnUrl(state) {\n        const params = new URLSearchParams(window.location.search);\n        const fromQuery = params.get(QueryParameterNames.ReturnUrl);\n        if (fromQuery && !fromQuery.startsWith(`${window.location.origin}/`)) {\n      \n            throw new Error(\"Invalid return url. The return url needs to have the same origin as the current page.\")\n        }\n        return (state && state.returnUrl) || fromQuery || `${window.location.origin}/`;\n    }\n\n    redirectToRegister() {\n        this.redirectToApiAuthorizationPath(`${ApplicationPaths.IdentityRegisterPath}?${QueryParameterNames.ReturnUrl}=${encodeURI(ApplicationPaths.Login)}`);\n    }\n\n    redirectToProfile() {\n        this.redirectToApiAuthorizationPath(ApplicationPaths.IdentityManagePath);\n    }\n\n    redirectToApiAuthorizationPath(apiAuthorizationPath) {\n        const redirectUrl = `${window.location.origin}${apiAuthorizationPath}`;\n   \n        window.location.replace(redirectUrl);\n    }\n\n    navigateToReturnUrl(returnUrl) {\n      \n        window.location.replace(returnUrl);\n    }\n}\n\nexport const Login = withTranslation()(LoginPlain);"],"mappings":"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"},"metadata":{},"sourceType":"module"}