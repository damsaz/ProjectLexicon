{"ast":null,"code":"import authService from '../api-authorization/AuthorizeService';\nimport { ApplicationPaths, QueryParameterNames } from '../api-authorization/ApiAuthorizationConstants';\nexport class UsersService {\n  async getUsers(page, pageSize, sortOrder, searchString) {\n    const token = await authService.getAccessToken();\n    const offset = (page - 1) * pageSize;\n\n    // Taken from here: https://fetch.spec.whatwg.org/#fetch-api\n    //let url = \"api/users?\" + \"offset=\" + offset + \"&limit=\" + pageSize + \"&sortOrder=\" + sortOrder; `${ANR}`\n    let url = `api/users?offset= + ${offset} + &limit= + ${pageSize} + &sortOrder= + ${sortOrder}`;\n    if (searchString !== \"\") url += \"&searchString=\" + encodeURIComponent(searchString);\n    try {\n      const response = await fetch(url, {\n        headers: !token ? {} : {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (response.ok) {\n        const jsonData = await response.json();\n        return jsonData;\n      } else {\n        if (response.status === 401) {\n          window.location.href = `${ApplicationPaths.Login}?${QueryParameterNames.ReturnUrl}=${encodeURI(window.location.href)}`;\n        }\n        throw new Error(\"HTTP error! Code: \" + response.status);\n      }\n    } catch (error) {\n      console.log(error);\n      throw error;\n    }\n  }\n  async deleteUser(userId) {\n    const token = await authService.getAccessToken();\n    try {\n      const headers = {\n        'content-type': 'application/json'\n      };\n      if (token) headers['Authorization'] = `Bearer ${token}`;\n      const response = await fetch('api/users/' + userId, {\n        method: 'DELETE',\n        headers: headers\n      });\n      if (response.ok) {\n        return;\n      } else {\n        throw new Error(\"HTTP error! Code: \" + response.status);\n      }\n    } catch (error) {\n      console.log(error);\n      throw error;\n    }\n  }\n  async getUser(userId) {\n    const token = await authService.getAccessToken();\n    try {\n      const response = await fetch('api/users/' + userId, {\n        headers: !token ? {} : {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (response.ok) {\n        const jsonData = await response.json();\n        return jsonData;\n      } else {\n        throw new Error(\"HTTP error! Code: \" + response.status);\n      }\n    } catch (error) {\n      console.log(error);\n      throw error;\n    }\n  }\n  async getUserprofil(userId) {\n    const token = await authService.getAccessToken();\n    try {\n      const response = await fetch('api/profil/' + userId, {\n        headers: !token ? {} : {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (response.ok) {\n        const jsonData = await response.json();\n        return jsonData;\n      } else {\n        throw new Error(\"HTTP error! Code: \" + response.status);\n      }\n    } catch (error) {\n      console.log(error);\n      throw error;\n    }\n  }\n  async addUser(user) {\n    const token = await authService.getAccessToken();\n    try {\n      const headers = {\n        'content-type': 'application/json'\n      };\n      if (token) headers['Authorization'] = `Bearer ${token}`;\n      const response = await fetch('api/users', {\n        method: 'POST',\n        body: JSON.stringify(user),\n        headers: headers\n      });\n      if (response.ok) {\n        return;\n      } else {\n        throw new Error(\"HTTP error! Code: \" + response.status);\n      }\n    } catch (error) {\n      console.log(error);\n      throw error;\n    }\n  }\n  async updateUser(userId, user) {\n    const token = await authService.getAccessToken();\n    try {\n      const headers = {\n        'content-type': 'application/json'\n      };\n      if (token) headers['Authorization'] = `Bearer ${token}`;\n      const response = await fetch('api/users/' + userId, {\n        method: 'PUT',\n        body: JSON.stringify(user),\n        headers: headers\n      });\n      if (response.ok) {\n        return;\n      } else {\n        throw new Error(\"HTTP error! Code: \" + response.status);\n      }\n    } catch (error) {\n      console.log(error);\n      throw error;\n    }\n  }\n  async changeUserPassword(userId, userPasswords) {\n    const token = await authService.getAccessToken();\n    try {\n      const headers = {\n        'content-type': 'application/json'\n      };\n      if (token) headers['Authorization'] = `Bearer ${token}`;\n      const response = await fetch('api/users/' + userId + '/change-password', {\n        method: 'POST',\n        body: JSON.stringify(userPasswords),\n        headers: headers\n      });\n      if (response.ok) {\n        return;\n      } else {\n        throw new Error(\"HTTP error! Code: \" + response.status);\n      }\n    } catch (error) {\n      console.log(error);\n      throw error;\n    }\n  }\n  static get instance() {\n    return usersService;\n  } // TODO: Check singleton/lifetime\n}\n\nconst usersService = new UsersService();\nexport default usersService;","map":{"version":3,"names":["authService","ApplicationPaths","QueryParameterNames","UsersService","getUsers","page","pageSize","sortOrder","searchString","token","getAccessToken","offset","url","encodeURIComponent","response","fetch","headers","ok","jsonData","json","status","window","location","href","Login","ReturnUrl","encodeURI","Error","error","console","log","deleteUser","userId","method","getUser","getUserprofil","addUser","user","body","JSON","stringify","updateUser","changeUserPassword","userPasswords","instance","usersService"],"sources":["/Users/bhrozdamsaz/Documents/GitHub/ProjectLexicon/projectLexicon/ClientApp/src/components/users/UsersService.js"],"sourcesContent":["import authService from '../api-authorization/AuthorizeService';\nimport { ApplicationPaths, QueryParameterNames } from '../api-authorization/ApiAuthorizationConstants'\n\nexport class UsersService {\n\tasync getUsers(page, pageSize, sortOrder, searchString) {\n\t\tconst token = await authService.getAccessToken();\n\t\tconst offset = (page - 1) * pageSize;\n\n\t\t// Taken from here: https://fetch.spec.whatwg.org/#fetch-api\n\t//let url = \"api/users?\" + \"offset=\" + offset + \"&limit=\" + pageSize + \"&sortOrder=\" + sortOrder; `${ANR}`\n\t\tlet url = `api/users?offset= + ${offset} + &limit= + ${pageSize} + &sortOrder= + ${sortOrder}`;\n\t\tif (searchString !== \"\")\n\t\t\turl += \"&searchString=\" + encodeURIComponent(searchString);\n\n\t\ttry {\n\t\t\tconst response = await fetch(url, {\n\t\t\t\theaders: !token ? {} : { 'Authorization': `Bearer ${token}` }\n\t\t\t});\n\n\t\t\tif (response.ok) {\n\t\t\t\tconst jsonData = await response.json();\n\t\t\t\treturn jsonData;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (response.status === 401) { \n\t\t\t\t\twindow.location.href =\n\t\t\t\t\t\t`${ApplicationPaths.Login}?${QueryParameterNames.ReturnUrl}=${encodeURI(window.location.href)}`;\n\t\t\t\t}\n\n\t\t\t\tthrow new Error(\"HTTP error! Code: \" + response.status);\n\t\t\t}\n\t\t}\n\t\tcatch (error) {\n\t\t\tconsole.log(error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tasync deleteUser(userId) {\n\t\tconst token = await authService.getAccessToken();\n\n\t\ttry {\n\t\t\tconst headers = { 'content-type': 'application/json' };\n\t\t\tif (token) headers['Authorization'] = `Bearer ${token}`;\n\n\t\t\tconst response = await fetch('api/users/' + userId, {\n\t\t\t\tmethod: 'DELETE',\n\t\t\t\theaders: headers,\n\t\t\t});\n\n\t\t\tif (response.ok) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new Error(\"HTTP error! Code: \" + response.status);\n\t\t\t}\n\t\t}\n\t\tcatch (error) {\n\t\t\tconsole.log(error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tasync getUser(userId) {\n\t\tconst token = await authService.getAccessToken();\n\n\t\ttry {\n\t\t\tconst response = await fetch('api/users/' + userId, {\n\t\t\t\theaders: !token ? {} : { 'Authorization': `Bearer ${token}` }\n\t\t\t});\n\n\t\t\tif (response.ok) {\n\t\t\t\tconst jsonData = await response.json();\n\t\t\t\treturn jsonData;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new Error(\"HTTP error! Code: \" + response.status);\n\t\t\t}\n\t\t}\n\t\tcatch (error) {\n\t\t\tconsole.log(error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\tasync getUserprofil(userId) {\n\t\tconst token = await authService.getAccessToken();\n\n\t\ttry {\n\t\t\tconst response = await fetch('api/profil/' + userId, {\n\t\t\t\theaders: !token ? {} : { 'Authorization': `Bearer ${token}` }\n\t\t\t});\n\n\t\t\tif (response.ok) {\n\t\t\t\tconst jsonData = await response.json();\n\t\t\t\treturn jsonData;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new Error(\"HTTP error! Code: \" + response.status);\n\t\t\t}\n\t\t}\n\t\tcatch (error) {\n\t\t\tconsole.log(error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tasync addUser(user) {\n\t\tconst token = await authService.getAccessToken();\n\n\t\ttry {\n\t\t\tconst headers = { 'content-type': 'application/json' };\n\t\t\tif (token) headers['Authorization'] = `Bearer ${token}`;\n\n\t\t\tconst response = await fetch('api/users', {\n\t\t\t\tmethod: 'POST',\n\t\t\t\tbody: JSON.stringify(user),\n\t\t\t\theaders: headers,\n\t\t\t});\n\n\t\t\tif (response.ok) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new Error(\"HTTP error! Code: \" + response.status);\n\t\t\t}\n\t\t}\n\t\tcatch (error) {\n\t\t\tconsole.log(error);\n\t\t\tthrow error;\n\t\t}\n\n\t}\n\n\tasync updateUser(userId, user) {\n\t\tconst token = await authService.getAccessToken();\n\n\t\ttry {\n\t\t\tconst headers = { 'content-type': 'application/json' };\n\t\t\tif (token) headers['Authorization'] = `Bearer ${token}`;\n\n\t\t\tconst response = await fetch('api/users/' + userId, {\n\t\t\t\tmethod: 'PUT',\n\t\t\t\tbody: JSON.stringify(user),\n\t\t\t\theaders: headers,\n\t\t\t});\n\n\t\t\tif (response.ok) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new Error(\"HTTP error! Code: \" + response.status);\n\t\t\t}\n\t\t}\n\t\tcatch (error) {\n\t\t\tconsole.log(error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tasync changeUserPassword(userId, userPasswords) {\n\t\tconst token = await authService.getAccessToken();\n\n\t\ttry {\n\t\t\tconst headers = { 'content-type': 'application/json' };\n\t\t\tif (token) headers['Authorization'] = `Bearer ${token}`;\n\n\t\t\tconst response = await fetch('api/users/' + userId + '/change-password', {\n\t\t\t\tmethod: 'POST',\n\t\t\t\tbody: JSON.stringify(userPasswords),\n\t\t\t\theaders: headers,\n\t\t\t});\n\n\t\t\tif (response.ok) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new Error(\"HTTP error! Code: \" + response.status);\n\t\t\t}\n\t\t}\n\t\tcatch (error) {\n\t\t\tconsole.log(error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tstatic get instance() { return usersService; } // TODO: Check singleton/lifetime\n}\n\nconst usersService = new UsersService();\n\nexport default usersService;"],"mappings":"AAAA,OAAOA,WAAW,MAAM,uCAAuC;AAC/D,SAASC,gBAAgB,EAAEC,mBAAmB,QAAQ,gDAAgD;AAEtG,OAAO,MAAMC,YAAY,CAAC;EACzB,MAAMC,QAAQ,CAACC,IAAI,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,YAAY,EAAE;IACvD,MAAMC,KAAK,GAAG,MAAMT,WAAW,CAACU,cAAc,EAAE;IAChD,MAAMC,MAAM,GAAG,CAACN,IAAI,GAAG,CAAC,IAAIC,QAAQ;;IAEpC;IACD;IACC,IAAIM,GAAG,GAAI,uBAAsBD,MAAO,gBAAeL,QAAS,oBAAmBC,SAAU,EAAC;IAC9F,IAAIC,YAAY,KAAK,EAAE,EACtBI,GAAG,IAAI,gBAAgB,GAAGC,kBAAkB,CAACL,YAAY,CAAC;IAE3D,IAAI;MACH,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAG,EAAE;QACjCI,OAAO,EAAE,CAACP,KAAK,GAAG,CAAC,CAAC,GAAG;UAAE,eAAe,EAAG,UAASA,KAAM;QAAE;MAC7D,CAAC,CAAC;MAEF,IAAIK,QAAQ,CAACG,EAAE,EAAE;QAChB,MAAMC,QAAQ,GAAG,MAAMJ,QAAQ,CAACK,IAAI,EAAE;QACtC,OAAOD,QAAQ;MAChB,CAAC,MACI;QACJ,IAAIJ,QAAQ,CAACM,MAAM,KAAK,GAAG,EAAE;UAC5BC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAClB,GAAEtB,gBAAgB,CAACuB,KAAM,IAAGtB,mBAAmB,CAACuB,SAAU,IAAGC,SAAS,CAACL,MAAM,CAACC,QAAQ,CAACC,IAAI,CAAE,EAAC;QACjG;QAEA,MAAM,IAAII,KAAK,CAAC,oBAAoB,GAAGb,QAAQ,CAACM,MAAM,CAAC;MACxD;IACD,CAAC,CACD,OAAOQ,KAAK,EAAE;MACbC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MAClB,MAAMA,KAAK;IACZ;EACD;EAEA,MAAMG,UAAU,CAACC,MAAM,EAAE;IACxB,MAAMvB,KAAK,GAAG,MAAMT,WAAW,CAACU,cAAc,EAAE;IAEhD,IAAI;MACH,MAAMM,OAAO,GAAG;QAAE,cAAc,EAAE;MAAmB,CAAC;MACtD,IAAIP,KAAK,EAAEO,OAAO,CAAC,eAAe,CAAC,GAAI,UAASP,KAAM,EAAC;MAEvD,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAC,YAAY,GAAGiB,MAAM,EAAE;QACnDC,MAAM,EAAE,QAAQ;QAChBjB,OAAO,EAAEA;MACV,CAAC,CAAC;MAEF,IAAIF,QAAQ,CAACG,EAAE,EAAE;QAChB;MACD,CAAC,MACI;QACJ,MAAM,IAAIU,KAAK,CAAC,oBAAoB,GAAGb,QAAQ,CAACM,MAAM,CAAC;MACxD;IACD,CAAC,CACD,OAAOQ,KAAK,EAAE;MACbC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MAClB,MAAMA,KAAK;IACZ;EACD;EAEA,MAAMM,OAAO,CAACF,MAAM,EAAE;IACrB,MAAMvB,KAAK,GAAG,MAAMT,WAAW,CAACU,cAAc,EAAE;IAEhD,IAAI;MACH,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,YAAY,GAAGiB,MAAM,EAAE;QACnDhB,OAAO,EAAE,CAACP,KAAK,GAAG,CAAC,CAAC,GAAG;UAAE,eAAe,EAAG,UAASA,KAAM;QAAE;MAC7D,CAAC,CAAC;MAEF,IAAIK,QAAQ,CAACG,EAAE,EAAE;QAChB,MAAMC,QAAQ,GAAG,MAAMJ,QAAQ,CAACK,IAAI,EAAE;QACtC,OAAOD,QAAQ;MAChB,CAAC,MACI;QACJ,MAAM,IAAIS,KAAK,CAAC,oBAAoB,GAAGb,QAAQ,CAACM,MAAM,CAAC;MACxD;IACD,CAAC,CACD,OAAOQ,KAAK,EAAE;MACbC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MAClB,MAAMA,KAAK;IACZ;EACD;EACA,MAAMO,aAAa,CAACH,MAAM,EAAE;IAC3B,MAAMvB,KAAK,GAAG,MAAMT,WAAW,CAACU,cAAc,EAAE;IAEhD,IAAI;MACH,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,aAAa,GAAGiB,MAAM,EAAE;QACpDhB,OAAO,EAAE,CAACP,KAAK,GAAG,CAAC,CAAC,GAAG;UAAE,eAAe,EAAG,UAASA,KAAM;QAAE;MAC7D,CAAC,CAAC;MAEF,IAAIK,QAAQ,CAACG,EAAE,EAAE;QAChB,MAAMC,QAAQ,GAAG,MAAMJ,QAAQ,CAACK,IAAI,EAAE;QACtC,OAAOD,QAAQ;MAChB,CAAC,MACI;QACJ,MAAM,IAAIS,KAAK,CAAC,oBAAoB,GAAGb,QAAQ,CAACM,MAAM,CAAC;MACxD;IACD,CAAC,CACD,OAAOQ,KAAK,EAAE;MACbC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MAClB,MAAMA,KAAK;IACZ;EACD;EAEA,MAAMQ,OAAO,CAACC,IAAI,EAAE;IACnB,MAAM5B,KAAK,GAAG,MAAMT,WAAW,CAACU,cAAc,EAAE;IAEhD,IAAI;MACH,MAAMM,OAAO,GAAG;QAAE,cAAc,EAAE;MAAmB,CAAC;MACtD,IAAIP,KAAK,EAAEO,OAAO,CAAC,eAAe,CAAC,GAAI,UAASP,KAAM,EAAC;MAEvD,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAC,WAAW,EAAE;QACzCkB,MAAM,EAAE,MAAM;QACdK,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACH,IAAI,CAAC;QAC1BrB,OAAO,EAAEA;MACV,CAAC,CAAC;MAEF,IAAIF,QAAQ,CAACG,EAAE,EAAE;QAChB;MACD,CAAC,MACI;QACJ,MAAM,IAAIU,KAAK,CAAC,oBAAoB,GAAGb,QAAQ,CAACM,MAAM,CAAC;MACxD;IACD,CAAC,CACD,OAAOQ,KAAK,EAAE;MACbC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MAClB,MAAMA,KAAK;IACZ;EAED;EAEA,MAAMa,UAAU,CAACT,MAAM,EAAEK,IAAI,EAAE;IAC9B,MAAM5B,KAAK,GAAG,MAAMT,WAAW,CAACU,cAAc,EAAE;IAEhD,IAAI;MACH,MAAMM,OAAO,GAAG;QAAE,cAAc,EAAE;MAAmB,CAAC;MACtD,IAAIP,KAAK,EAAEO,OAAO,CAAC,eAAe,CAAC,GAAI,UAASP,KAAM,EAAC;MAEvD,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAC,YAAY,GAAGiB,MAAM,EAAE;QACnDC,MAAM,EAAE,KAAK;QACbK,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACH,IAAI,CAAC;QAC1BrB,OAAO,EAAEA;MACV,CAAC,CAAC;MAEF,IAAIF,QAAQ,CAACG,EAAE,EAAE;QAChB;MACD,CAAC,MACI;QACJ,MAAM,IAAIU,KAAK,CAAC,oBAAoB,GAAGb,QAAQ,CAACM,MAAM,CAAC;MACxD;IACD,CAAC,CACD,OAAOQ,KAAK,EAAE;MACbC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MAClB,MAAMA,KAAK;IACZ;EACD;EAEA,MAAMc,kBAAkB,CAACV,MAAM,EAAEW,aAAa,EAAE;IAC/C,MAAMlC,KAAK,GAAG,MAAMT,WAAW,CAACU,cAAc,EAAE;IAEhD,IAAI;MACH,MAAMM,OAAO,GAAG;QAAE,cAAc,EAAE;MAAmB,CAAC;MACtD,IAAIP,KAAK,EAAEO,OAAO,CAAC,eAAe,CAAC,GAAI,UAASP,KAAM,EAAC;MAEvD,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAC,YAAY,GAAGiB,MAAM,GAAG,kBAAkB,EAAE;QACxEC,MAAM,EAAE,MAAM;QACdK,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACG,aAAa,CAAC;QACnC3B,OAAO,EAAEA;MACV,CAAC,CAAC;MAEF,IAAIF,QAAQ,CAACG,EAAE,EAAE;QAChB;MACD,CAAC,MACI;QACJ,MAAM,IAAIU,KAAK,CAAC,oBAAoB,GAAGb,QAAQ,CAACM,MAAM,CAAC;MACxD;IACD,CAAC,CACD,OAAOQ,KAAK,EAAE;MACbC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MAClB,MAAMA,KAAK;IACZ;EACD;EAEA,WAAWgB,QAAQ,GAAG;IAAE,OAAOC,YAAY;EAAE,CAAC,CAAC;AAChD;;AAEA,MAAMA,YAAY,GAAG,IAAI1C,YAAY,EAAE;AAEvC,eAAe0C,YAAY"},"metadata":{},"sourceType":"module"}